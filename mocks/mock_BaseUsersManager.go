// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erupshis/bonusbridge/internal/auth/users/managers (interfaces: BaseUsersManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBaseUsersManager is a mock of BaseUsersManager interface.
type MockBaseUsersManager struct {
	ctrl     *gomock.Controller
	recorder *MockBaseUsersManagerMockRecorder
}

// MockBaseUsersManagerMockRecorder is the mock recorder for MockBaseUsersManager.
type MockBaseUsersManagerMockRecorder struct {
	mock *MockBaseUsersManager
}

// NewMockBaseUsersManager creates a new mock instance.
func NewMockBaseUsersManager(ctrl *gomock.Controller) *MockBaseUsersManager {
	mock := &MockBaseUsersManager{ctrl: ctrl}
	mock.recorder = &MockBaseUsersManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseUsersManager) EXPECT() *MockBaseUsersManagerMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockBaseUsersManager) AddUser(arg0, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockBaseUsersManagerMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockBaseUsersManager)(nil).AddUser), arg0, arg1)
}

// GetUserId mocks base method.
func (m *MockBaseUsersManager) GetUserId(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockBaseUsersManagerMockRecorder) GetUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockBaseUsersManager)(nil).GetUserId), arg0)
}

// GetUserRole mocks base method.
func (m *MockBaseUsersManager) GetUserRole(arg0 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRole", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRole indicates an expected call of GetUserRole.
func (mr *MockBaseUsersManagerMockRecorder) GetUserRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRole", reflect.TypeOf((*MockBaseUsersManager)(nil).GetUserRole), arg0)
}

// ValidateUser mocks base method.
func (m *MockBaseUsersManager) ValidateUser(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUser indicates an expected call of ValidateUser.
func (mr *MockBaseUsersManagerMockRecorder) ValidateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*MockBaseUsersManager)(nil).ValidateUser), arg0, arg1)
}
