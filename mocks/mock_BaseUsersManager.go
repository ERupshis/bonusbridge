// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erupshis/bonusbridge/internal/auth/users/managers (interfaces: BaseUsersManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	data "github.com/erupshis/bonusbridge/internal/auth/users/data"
	gomock "github.com/golang/mock/gomock"
)

// MockBaseUsersManager is a mock of BaseUsersManager interface.
type MockBaseUsersManager struct {
	ctrl     *gomock.Controller
	recorder *MockBaseUsersManagerMockRecorder
}

// MockBaseUsersManagerMockRecorder is the mock recorder for MockBaseUsersManager.
type MockBaseUsersManagerMockRecorder struct {
	mock *MockBaseUsersManager
}

// NewMockBaseUsersManager creates a new mock instance.
func NewMockBaseUsersManager(ctrl *gomock.Controller) *MockBaseUsersManager {
	mock := &MockBaseUsersManager{ctrl: ctrl}
	mock.recorder = &MockBaseUsersManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseUsersManager) EXPECT() *MockBaseUsersManagerMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockBaseUsersManager) AddUser(arg0 context.Context, arg1 *data.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockBaseUsersManagerMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockBaseUsersManager)(nil).AddUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockBaseUsersManager) GetUser(arg0 context.Context, arg1 string) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockBaseUsersManagerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockBaseUsersManager)(nil).GetUser), arg0, arg1)
}

// GetUserID mocks base method.
func (m *MockBaseUsersManager) GetUserID(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockBaseUsersManagerMockRecorder) GetUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockBaseUsersManager)(nil).GetUserID), arg0, arg1)
}

// GetUserRole mocks base method.
func (m *MockBaseUsersManager) GetUserRole(arg0 context.Context, arg1 int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRole", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRole indicates an expected call of GetUserRole.
func (mr *MockBaseUsersManagerMockRecorder) GetUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRole", reflect.TypeOf((*MockBaseUsersManager)(nil).GetUserRole), arg0, arg1)
}
